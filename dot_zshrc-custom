
# Delete a given line number in the known_hosts file.
function knownrm() {
  re='^[0-9]+$'
  if ! [[ $1 =~ $re ]] ; then
    echo "error: line number missing" >&2;
  else
    sed -i '' "$1d" ~/.ssh/known_hosts
  fi
}

# set iTerm2 profile https://iterm2.com/documentation-escape-codes.html
function it2prof() {
  echo -e "\033]50;SetProfile=$1\a"
}

#
# create backup of given filename and push previous file further down
#
function createBackupFiles {
  if [ -z "$1" ]; then
    echo "Usage: $0 filename"
    return 1
  else
    fileName=$1

    if [ -f ${fileName} ]; then
      for i in 9 8 7 6 5 4 3 2
      do
        if [ -f ${fileName}.bak.$((i-1)) ]; then
          cp ${fileName}.bak.$((i-1)) ${fileName}.bak.${i}
        fi
      done

      cp ${fileName} ${fileName}.bak.1
    else
      echo "File \"${fileName}\" doesn't exist, nothing to do."
      return 1
    fi
  fi
}

# dnscontrol
function dnsc {
  if [ -f dnsconfig.js ]; then
    ## read header
    CREDS=$(head -1 dnsconfig.js | awk '{print $2}')

    case "$1" in
        check)
                dnscontrol check
                ;;
        preview)
                dnscontrol preview --creds "!op read op://${CREDS}/credential"
                ;;
        push)
                dnscontrol push --creds "!op read op://${CREDS}/credential"
                ;;
        *)
                echo "Usage: dnsc [check|preview|push]"
                echo ""
                return 1
                ;;
    esac
  else
    echo "dnsc: no dnsconfig.js found!"
    return 1
  fi
}

# Creates two passwords, first is alphanumeric and
# second is alphanumeric with some special characters
#
function genpass {
  if [ -z "$1" ]; then
    echo "genpass takes one argument, password length, i.e. genpass 32"
    return 1
  else
    cat /dev/random | env LC_ALL=C tr -dc a-zA-Z0-9 | fold -w $1 | head -1
    cat /dev/random | env LC_ALL=C tr -dc 'a-zA-Z0-9--:&!%,+' | fold -w $1 | head -1
  fi
}

#
# End of functions
#

export icloud=~/Library/Mobile\ Documents/com\~apple\~CloudDocs

# Tell homebrew to not autoupdate every single time I run it (just once a week).
#export HOMEBREW_AUTO_UPDATE_SECS=604800
brewcache=`brew --cache`
alias brewclean="rm -rf ${brewcache} ; brew cleanup -s"

#
# macOS specific
#
# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
# Lock the screen (when going AFK)
alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
alias sleepnow="pmset sleepnow"
alias sleepdisp="open -a ScreenSaverEngine && pmset displaysleepnow"
alias mute='osascript -e "set Volume 0"'

#
# git
#
alias gl='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit'
# get hash of remote HEAD
alias grh='git ls-remote 2>&1 |grep HEAD'
# undo last commit
alias gitundo='git reset --soft HEAD~'

#
# Terraform
#
alias tfv='terraform validate'
alias tfp='terraform plan'
alias tfa='terraform apply'

# show date and time in history
alias h='history -i'

alias lt='ls -lth'
alias cz='chezmoi'
alias week='date +%V'
alias dayear='date +%V'
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias myip='curl http://ipecho.net/plain; echo'
alias dus='du -ach | sort -h'

export HISTSIZE=99999
export HISTFILESIZE=99999
export SAVEHIST=$HISTSIZE

# Don't require escaping globbing characters in zsh.
unsetopt nomatch

setopt extended_history # record timestamp of command in HISTFILE
# delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_expire_dups_first

# Share history between instances
setopt share_history

# enable vi-style 
set -o vi

# iTerm2 shell integration
#if [ -n "$ZSH_VERSION" ]; then
#    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
#fi

#
# Shell autocompletion
#
# zsh auto completion
autoload -Uz compinit && compinit
# Case insensitive.
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'

source ${brewprefix}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
#source '${brewprefix}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
#source '${brewprefix}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'

# enable bash auto completion support
autoload -U +X bashcompinit && bashcompinit
# auto completion for Azure CLI
source ${brewprefix}/etc/bash_completion.d/az

# auto completion for 1Password op
eval "$(op completion zsh)"; compdef _op op

